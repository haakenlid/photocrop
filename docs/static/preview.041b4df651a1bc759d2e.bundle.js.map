{"version":3,"file":"static/preview.041b4df651a1bc759d2e.bundle.js","sources":["webpack:///./src/utils.js"],"sourcesContent":["// clamp number between min and max\nconst clamp = (min, max) => n => Math.max(min, Math.min(n, max))\n\n// round to precision 4\nexport const round = num => Number(num.toPrecision(4))\n\n// relative ratio between low and high\nconst ratioOf = (low, val, high) =>\n  high === low ? 0.5 : (val - low) / (high - low)\n\n// format number 0.5 -> '50%'\nconst numberToPercent = number => `${(100 * number).toFixed(1)}%`\n\n// normalize cropbox. Make sure it's not outside of bounds,\n// that top < bottom etc.\nexport const normalize = ({ x, y, left, top, right, bottom }) => {\n  const func = (a, b) => a - b\n  const h_sorted = [0, 0, left, right, 1, 1].sort(func)\n  const v_sorted = [0, 0, top, bottom, 1, 1].sort(func)\n  return {\n    x: [0, x, 1].sort(func)[1],\n    y: [0, y, 1].sort(func)[1],\n    left: h_sorted[2],\n    top: v_sorted[2],\n    right: h_sorted[3],\n    bottom: v_sorted[3],\n  }\n}\n\n// make sure cropbox has a minimum size\nexport const minsize = size => ({ left, right, top, bottom, x, y }) => {\n  if (right - left < size) {\n    const c = (left + right) / 2\n    left = c - size / 2\n    right = c + size / 2\n  }\n  if (bottom - top < size) {\n    const c = (top + bottom) / 2\n    top = c - size / 2\n    bottom = c + size / 2\n  }\n  return normalize({ x, y, left, right, top, bottom })\n}\n\nconst closeCrop = (x, y, l, r, t, b, A) => {\n  const w = r - l\n  const h = b - t\n  const a = w / h\n  const W = 0.5 * Math.min(A, 1, a > A ? w : h * A)\n  const H = W / A\n  const [X, Y] = [\n    W * 2 > w ? [W, (l + r) / 2, 1 - W] : [l + W, x, r - W],\n    H * 2 > h ? [H, (t + b) / 2, 1 - H] : [t + H, y, b - H],\n  ].map(arr => arr.sort((n, m) => n - m)[1])\n  return { left: X - W, right: X + W, top: Y - H, bottom: Y + H }\n}\n\nexport const getStyles = (src, cropBox, imgRatio, frameRatio) => {\n  const { left, top, right, bottom } = closeCrop(\n    cropBox.x,\n    cropBox.y,\n    cropBox.left,\n    cropBox.right,\n    cropBox.top,\n    cropBox.bottom,\n    frameRatio / imgRatio,\n  )\n  const width = right - left\n  const height = bottom - top\n  return {\n    backgroundImage: `url(\"${src}\")`,\n    backgroundPosition: [[width, right, 1], [height, bottom, 1]]\n      .map(dim => ratioOf(...dim))\n      .map(numberToPercent)\n      .join(' '),\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: `${numberToPercent(1 / width)} auto`,\n  }\n}\n\n// download image and find pixel width and height\nexport const getImageSize = src =>\n  new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => resolve([img.width, img.height])\n    img.onerror = reject\n    img.src = src\n  })\n\nexport const getRelativePosition = element => e => {\n  const { left, top, width, height } = element.getBoundingClientRect()\n  return [(e.clientX - left) / width, (e.clientY - top) / height]\n    .map(clamp(0, 1))\n    .map(round)\n}\n"],"mappings":"AACA","sourceRoot":""}